{
  "name": "Tornado",
  "tagline": "Reducido núcleo de trabajo para PHP",
  "body": "![ScreenShot](http://tornado-php.com/images/tornado-logo.png)\r\n\r\nTORNADO es un reducido marco de trabajo para PHP que permite implementar el \r\npatrón HMVC y/o servicios RESTfull\r\n\r\nPuede obtener más información en su web http://tornado-php.com\r\n\r\n### Filosofia:\r\n\r\nTORNADO no intenta ser un framework PHP full-stack. Contrariamente intenta ser  \r\nun núcleo de trabajo muy reducido para implementar patrones de arquitectura HMVC \r\ny/o servicios REST, con la menor parametrización y utilización de código \r\nposible, apoyado en un core que organice su proyecto junto a un sistema de \r\nconfiguración y gestión de errores simple.\r\n\r\nTORNADO no incluye librerías de soporte para tareas comunes como acceso a base \r\nde datos, gestión de plantillas, envío de mais, etc.\r\nUtilice Composer para incluir paquetes de terceros de acuerdo a las necesidades \r\nparticulares del proyecto a desarrollar.\r\n\r\n\r\n### Inspiración:\r\n\r\nTORNADO se inspiro en varios microframeworks PHP, entre ellos cabe mencionar:\r\n\r\n- Toro - http://toroweb.org/\r\n- Flight - http://flightphp.com/\r\n- Shield - https://github.com/enygma/shieldframework\r\n- Slim - http://www.slimframework.com/\r\n- AltoRouter - http://altorouter.com/\r\n\r\n### Metas:\r\n\r\nTORNADO se desarrollo tratando de respetar las siguiente metas:\r\n\r\n- ser rápido\r\n- fácil de entender _(tanto su API como su construcción interna)_\r\n- tener la menor cantidad de métodos posibles dentro de su API\r\n- permitir el uso de ganchos para extender el mismo\r\n- incluir librerías/paquetes de terceros con suma facilidad\r\n- tener la menor cantidad de líneas de código posible\r\n- ser un core de trabajo _(NUNCA un framework)_\r\n\r\n## Características:\r\n\r\n- Enrutamientos para utilizar módulos HMVC y/o servicios REST (apoyado en URL \r\namigables)\r\n- Configuración general de la aplicación\r\n- Ganchos para extender las características del core\r\n- Captura de errores y excepciones\r\n- Inyección de dependencias\r\n\r\n### Codificación:\r\n\r\nTORNADO apoya la iniciativa del PHP Framework Interop Group e implementa los \r\nestándares PSR-2 y PSR-4.\r\n\r\nPuede obtener más información en http://www.php-fig.org/\r\n\r\n## Instalación:\r\n\r\nLa instalación recomendada requiere el uso de Composer. \r\n\r\n* Instale composer ( puede obtener ayuda en https://getcomposer.org/download/ )\r\n\r\n* Cree un archivo composer.json con los paquetes a instalar\r\n\r\n```\r\n{\r\n    \"require\": {\r\n        \"danielspk/tornado\" : \"2.*\"\r\n    }\r\n}\r\n```\r\n\r\n* Inicie la consola de comando y ejecute el siguiente comando:\r\n\r\n```\r\ncomposer install\r\n```\r\n\r\n## Manual de uso:\r\n\r\nLa versión actual difiere totalmente de la versión inicial 1.0.0\r\n\r\nSi va a actualizar su aplicación lea en detalle el archivo de cambios CHANGELOG.md\r\n\r\n#### Uso básico:\r\nEjemplo de uso básico (con dos tipos de enrutamientos)\r\n\r\n```php\r\n<?php\r\n\r\n    // incluir el autoload\r\n    require 'vendor/autoload.php';\r\n    \r\n    // obtener una instancia del core\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n    \r\n    // enrutamiento a módulo desde raíz\r\n    $app->route('/', 'demo|demo|index');\r\n    \r\n    // enrutamiento a función anónima\r\n    $app->route(array(\r\n        '/saludar/:string'\t=> function($pNombre = null){\r\n            echo 'Hola ' . $pNombre;\r\n        }\r\n    ));\r\n\r\n    // ejecutar la aplicación\r\n    $app->run();\r\n    \r\n```\r\n\r\n#### API:\r\n\r\n##### Obtener Instancia del core:\r\n\r\n```php\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n```\r\n\r\n##### Ejecutar el core:\r\n\r\n```php\r\n\t// con una instancia del core en una variable\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n    $app->run();\r\n\r\n    // sin ninguna instancia anterior del core\r\n    \\DMS\\Tornado\\Tornado::getInstance()->run();\r\n```\r\n\r\n##### Setear configuraciones:\r\n\r\n```php\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    // configuración simple\r\n    $app->config('nombre', 'valor del nombre');\r\n    $app->config('nombres', array('nombre1'=>'valor1', 'nombre2'=>'valor2'));\r\n    \r\n    // configuración múltiple\r\n    $app->config([\r\n        'clave1' => 'valor uno',\r\n        'clave2' => 'valor dos'\r\n    ]);\r\n```\r\n\r\n##### Leer configuraciones:\r\n\r\n```php\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    // configuración simple\r\n    echo $app->config('nombre');\r\n\r\n    // configuración array\r\n    $nombres = $app->config('nombres');\r\n    echo $nombres[0]['nombre1'];\r\n    echo $nombres[1]['nombre2'];\r\n```\r\n\r\n##### Variables de configuración propias de Tornado:\r\n\r\nTornado permite configurar el ambiente de trabajo de la aplicación.\r\nDe esta forma se puede cambiar el comportamiento interno del core:\r\n\r\n```php\r\n\r\n    // configurar la aplicación para un ambiente de desarrollo\r\n    // - errores visibles\r\n    // - parse de anotaciones en módulos HMVC para generar enrutamientos automáticos\r\n    $app->config('tornado_environment_development', true);\r\n\r\n```\r\n\r\nOtras configuraciones:\r\n\r\n```php\r\n\r\n    // - indica si se van a utilizar módulos hmvc\r\n    $app->config('tornado_hmvc_use', true);\r\n\r\n    // - ruta donde se alojarán los módulos hmvc\r\n    // (relativa a donde se inicia Tornado)\r\n    $app->config('tornado_hmvc_module_path', true);\r\n        \r\n    // - ruta donde se serializaran las rutas de los módulos hmvc\r\n    // (relativa a donde se inicia Tornado)\r\n    $app->config('tornado_hmvc_serialize_path', true);\r\n        \r\n```\r\n\r\n##### Uso de Hooks:\r\nExisten 6 tipos de hooks:\r\n- init: antes de parsear la url en busca de una ruta coincidente\r\n- before: antes de ejecutar la ruta coincidente\r\n- after: despues de ejecutar la ruta coincidente\r\n- end: al finalizar la ejecución de la petición\r\n- 404: al no encontrarse una ruta coincidente con la url\r\n- error: al atraparse un error o excepción en aplicación\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    // utilizando una clase / método / parámetros\r\n    $app->hook('error', array('ErrorUser', 'display', array()));\r\n\r\n    // utilizando una función anónima\r\n    $app->hook('404', function(){\r\n        echo '404';\r\n    });\r\n    \r\n```\r\n\r\nTambién es posible crear ganchos personalizados. Ejemplo usando una clase de usuario:\r\n\r\n```php\r\n\r\n    class Saludador\r\n    {\r\n        public function persona($nombre, $apellido)\r\n        {\r\n            echo 'Hola ' . $nombre . ', ' . $apellido;\r\n        }\r\n    }\r\n\r\n    $app->hook('saludar', array('Saludador', 'persona', array('Tornado', 'PHP')));\r\n    \r\n```\r\n\r\nLa forma de ejecutar un gancho por código es la siguiente:\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    $app->hook('fueraDeLinea');\r\n    \r\n```\r\n\r\nPueden crearse n cantidad de hooks con un mismo nombre. Los mismos se ejecutarán \r\nsecuencialmente en el orden en que fueron definidos. Puede, opcionalmente, alterar \r\neste orden indicando explicitamente el orden deseado:\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    $app->hook('before', function(){\r\n        echo 'Declarado primero - ejecutado despues';\r\n    }, 1);\r\n    \r\n    $app->hook('before', function(){\r\n        echo 'Declarado despues - ejecutado primero';\r\n    }, 0);\r\n    \r\n```\r\n\r\nSi declara más de un hook con el mismo nombre puede impedir que se ejecuten los hooks \r\nsubsiguientes haciendo que el hook devuelva false en su ejecución.\r\n\r\nA excepción de los hook init puede consultar que ruta se va o se esta ejecutandose de \r\nla siguiente forma:\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    $app->hook('before', function() use ($app){\r\n        $ruta = $app->getRouteMatch()\r\n    });\r\n    \r\n```\r\n\r\nEsto devolverá un array con la siguiente información:\r\n\r\n- Método de la petición (GET, POST, etc)\r\n- Ruta\r\n- Callback\r\n- Parámetros\r\n\r\n##### Hooks y flujo de ejecución:\r\n\r\nLa secuencia de ejecución del core es la siguiente:\r\n- se ejecutan los hooks init\r\n- se parsea la url en busca de la ruta coincidente\r\n- - si no hay coincidencias se ejecuta:\r\n- - - hooks 404\r\n- - - hooks end\r\n- - - se finaliza la ejecución\r\n- se ejecutan los hooks before\r\n- - si alguno devuelve false se ejecuta:\r\n- - - hooks end\r\n- - - se finaliza la ejecución\r\n- se ejecuta la ruta coincidente\r\n- se ejecutan los hooks after\r\n- se ejecutan los hooks end\r\n\r\n##### Definir Enrutamientos:\r\nLos enrutamientos pueden ser:\r\n- (vacio) - cualquier tipo de petición\r\n- GET - RESTfull por método GET\r\n- POST - RESTfull por método POST\r\n- PUT - RESTfull por método PUT\r\n- DELETE - RESTfull por método DELETE\r\n\r\nEn caso de que el servidor no soporte los métodos PUT y DELETE se pueden simular \r\nlos mismos enviando una petición POST con una variable \"REST_METHOD\" cuyo valor \r\nsea PUT o DELETE\r\n\r\nExisten cuatro tipos de parámetros para enrutar una URL:\r\n- :string - sólo acepta letras\r\n- :number - sólo acepta números\r\n- :alpha - acepta números y letras\r\n- :* - acepta cualquier cantidad y tipo de parámetros (sólo puede incluirse uno solo y al final)\r\n\r\nEn caso de incluir parámetros opcionales la sintaxis es la siguiente:\r\n- [/:string]\r\n- [/:number]\r\n- [/:alpha]\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    // utilizando un módulo y cualquier tipo de petición\r\n    $app->route('/', 'demo|demo|index');\r\n\r\n    // utilizando una función anónima y cualquier tipo de petición\r\n    $app->route('/saludar/:alpha', function($pNombre = null) {\r\n        echo 'Hola ' . $pNombre;\r\n    });\r\n\r\n    // utilizando parámetros opcionales y cualquier tipo de petición\r\n    $app->route('/mostrar[/:alpha][/:number]', function ($pNombre = null, $pEdad = null) {\r\n        echo 'Hola ' . $pNombre . ', ' . $pEdad;\r\n    });\r\n\r\n    // utilizando un comodín (n cantidad de parámetros) y cualquier tipo de petición\r\n    $app->route('/felicitador/:*', function () {\r\n        $params = func_get_args();\r\n        echo 'Felicitaciones ' . (isset($params[0]) ? $params[0] : '');\r\n    });\r\n\r\n    // utilizando un módulo y petición POST\r\n    $app->route('POST /', 'demo|demo|guardar');\r\n\r\n    // utilizando un módulo y petición GET o POST\r\n    $app->route('GET|POST /', 'demo|demo|listar');\r\n    \r\n```\r\n\r\nTambién es posible definir parámetros con nombre. En dicho caso puede omitirse \r\nel uso de parámetros de entrada en las funciones anónimas o métodos de los \r\nmódulos HMVC. Ejemplo:\r\n\r\n```php\r\n\r\n    $app->route('/bienvenida/@nombre:alpha/tornado/@edad:number', function () use ($app) {\r\n        echo 'Hola ' . $app->param('nombre') . ', Edad: ' . $app->param('edad');\r\n    });\r\n    \r\n```\r\n\r\nPuede agregar tipos de parámetros auxiliares de la siguiente forma:\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    $app->addTypeParam(':custom', '([123]+)');\r\n    \r\n    $app->route('/personalizado/:custom', function ($pCustom = null) {\r\n        echo 'Parametro personalizado ' . $pCustom;\r\n    });\r\n    \r\n```\r\n\r\nNota: El único enrutamiento obligatorio es el del nodo raíz ya que indica cuál será el \r\ncallback a ejecutar por defecto al ingresar a la aplicación.\r\n\r\n##### Delegaciones:\r\nEs posible delegar la acción de un módulo/ruta hacia otro sin necesidad de realizar \r\nuna redirección por http. Esta delegación invoca al otro módulo/ruta dentro del mismo \r\nrequest original. Ejemplo:\r\n\r\n```php\r\n\r\n    // a módulo sin parámetros\r\n    $app->forwardModule('modulo|clase|metodo');\r\n\r\n    // a módulo con parámetros\r\n    $app->forwardModule('modulo|clase|metodo', array('param1', 'param2'));\r\n\r\n    // a url (parámetros incluidos en la url)\r\n    $app->forwardUrl('/otra/ruta/1234');\r\n    \r\n```\r\n\r\nSi se encuentra instalado FPM en el Servidor puede devolver el resultado al cliente y \r\ncontinuar con la ejecución de la petición actual en segundo plano de la siguiente forma:\r\n\r\n```php\r\n\r\n    $app->finishRequest();\r\n \r\n```\r\n\r\n##### Anotaciones:\r\nAlgunas acciones pueden ser establecidas mediante anotaciones DocBlocks.\r\n\r\n###### Enrutamientos:\r\nEn los controladores de los módulos HMVC puede utilizar el tag @T_ROUTE para \r\nsetear un enrutamiento. Esto generará un archivo de configuración denominado \r\n\"route_serialize.php\".\r\n\r\nSiempre que la aplicación se encuentre en modo de desarrollo (variable de \r\nconfiguración \"tornado_environment_development\" en true) se recorrerán los \r\nmétodos de los controladores para actualizar este archivo de configuración.\r\n\r\nEjemplo:\r\n\r\n```php\r\n\r\n    class Demo extends \\DMS\\Tornado\\Controller\r\n    {\r\n        /**\r\n         * Ejemplo de enrutamientos mediante anotaciones\r\n         * @T_ROUTE /demo/anotacion\r\n         * @T_ROUTE GET|POST /demo/otra/anotacion\r\n         */\r\n        public function index()\r\n        {\r\n            echo 'Hola Mundo Tornado';\r\n        }\r\n    }\r\n\r\n```\r\n\r\n##### Vistas\r\nPuede incluir archivos de vistas/templates dentro de una ruta manejada por \r\nclousures de la siguiente forma:\r\n\r\n```php\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    $app->render('ruta/archivo.php');  // vista sin parámetros\r\n    $app->render('ruta/archivo.php', array('nombre'=>'valor')); // vista con parámetros\r\n```\r\n\r\nLos parámetros pasados a la vista/template se manejan de la misma forma que los \r\nparámetros pasados a una vista de un módulo HMVC.\r\n\r\n##### Gestión de errores y excepciones:\r\nEl manejo de errores y excepciones viene habilitado por defecto. Puede alterar \r\nsu comportamiento de la siguiente forma:\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    $app->error(true);  // habilita el manejador\r\n    $app->error(false); // deshabilita el manejador\r\n    \r\n```\r\n\r\nPuede acceder a la última excepción lanzada de la siguiente forma:\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    $exc = $app->error();\r\n    \r\n```\r\n\r\n##### Inyección de Dependencias:\r\nEs posible extender el core mediante la inyección de nuevas clases.\r\nLa forma de registrar una nueva dependencia es:\r\n\r\n```php\r\n\r\n    $app->register('fecha', function($fecha = '2014-12-31'){\r\n        return new \\DateTime($fecha);\r\n    });\r\n    \r\n```\r\n\r\nEste registro creará un dependencia para la clase 'DateTime' denominada 'fecha'.\r\nPodrá hacer uso de la misma de la siguiente forma:\r\n\r\n```php\r\n\r\n    $app = \\DMS\\Tornado\\Tornado::getInstance();\r\n\r\n    echo $app->container('fecha')->format('d/m/Y') . '<br />';\r\n    \r\n```\r\n\r\nPor defecto todas las dependencias inyectadas crean una nueva instancia de la clase.\r\nPuede registrar el servicio como Singleton seteando el tercer parámetro opcional en true:\r\n\r\n```php\r\n\r\n    $app->register('fecha', function(){\r\n        return new \\DateTime('2014-12-31');\r\n    }, true);\r\n    \r\n```\r\n\r\nSi las dependencias requieren parámetros en sus constructores puede definir los mismos \r\nde la siguiente forma:\r\n\r\n```php\r\n\r\n    $app->register('fecha.config', '2014-12-31');\r\n    \r\n    $app->register('fecha', function(\\DMS\\Tornado\\Service $c){\r\n        return new \\DateTime($c->get('fecha.config'));\r\n    });\r\n    \r\n```\r\n\r\n##### Organización de proyecto:\r\n\r\nExiste un proyecto que dispone de un esqueleto para una aplicación base.\r\nPuede descargar el mismo desde https://github.com/danielspk/TornadoSkeletonApplication\r\n\r\n#### Módulos:\r\n\r\nTornado PHP permite utilizar módulos HMVC de forma conjunta con las funciones anónimas.\r\n\r\nSi utiliza Composer, se recomienda registrar la ubicación de los módulos en el autoload. Ejemplo:\r\n\r\n```\r\n    \"autoload\": {\r\n        \"psr-4\": {\r\n            \"App\\\\Modules\\\\\": \"app/modules/\"\r\n        }\r\n    },\r\n```\r\n\r\n##### Controladores:\r\nTodos los controladores deben extender de \\DMS\\Tornado\\Controller y deben \r\ndefinir un namespace que respete la especificación PSR-4. Ejemplo: \r\n\r\nAsumiendo que los módulos HMVC se encuentran en App\\Modules\\[Modulo HMVC]\\Controller\r\n\r\n```php\r\n\r\n    namespace App\\Modules\\Demo\\Controller;\r\n\r\n    use \\DMS\\Tornado\\Controller;\r\n    \r\n    class Demo extends Controller {\r\n        public function index($param = null){\r\n            echo ' Hola ' . $param . '<br>';\r\n        }\r\n    }\r\n    \r\n```\r\n\r\nLos Controladores poseen una instancia de tornado PHP como propiedad propia. Puede acceder a la misma de la siguiente forma:\r\n\r\n```php\r\n\r\n    // permite acceder a una instancia de Tornado\r\n    $app = $this->app;\r\n    \r\n```\r\n\r\n##### Modelos:\r\nTodos los controladores deben definir un namespace que respete la siguiente \r\njerarquía: App\\Modules\\[Modulo HMVC]\\Model\r\n\r\n```php\r\n\r\n    namespace App\\Modules\\Demo\\Model;\r\n\r\n    class Demo {\r\n        public function getDemos($param = null){\r\n            return true;\r\n        }\r\n    }\r\n    \r\n```\r\n\r\n##### Vistas:\r\nDado que el controlador posee una instancia de Tornado es posible usar el método render() para invocar a una vista.\r\n\r\n## Resumen de Métodos:\r\n\r\n**DMS\\Tornado\\Tornado**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| getInstance() | Devuelve la instancia de Tornado (si no existe la crea) |\r\n| run() | Arranca el core |\r\n| config(string) | Devuelve el valor de la variable de configuración |\r\n| config(array) | Setea un array de configuración |\r\n| config(string, mixed) | Setea el valor en la variable de configuración |\r\n| error() | Devuelve la última excepción atrapada |\r\n| error(bool) | Habilita/deshabilita el manejador interno de errores y excepciones |\r\n| hook(string) | Ejecuta el gancho indicado |\r\n| hook(string mixed) | Registra un gancho y su callback |\r\n| route(string, mixed) | Registra un enrutamiento y su callback |\r\n| addTypeParam(string, string) | Registra un nuevo tipo de parámetro |\r\n| register(string, callable, [bool]) | Registra una clase/servicio para extender la aplicación |\r\n| container(string) | Devuelve un servicio o parámetro |\r\n| render(string) | Incluye una vista/template |\r\n| render(string, array) | Incluye una vista/template junto a un array de variables |\r\n| param(string) | Devuelve el valor de un parámetro del enrutamiento |\r\n| getRouteMatch() | Devuelve la ruta que se esta procesando |\r\n| forwardModule(string) | Delega la acción hacia otro módulo |\r\n| forwardModule(string, array) | Delega la acción hacia otro módulo |\r\n| forwardUrl(string) | Delega la acción hacia otra ruta |\r\n| finishRequest() | Devuelve el request al cliente y continua la ejecución del script actual |\r\n\r\n**DMS\\Tornado\\Service**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| get | Devuelve un servicio o parámetro |\r\n\r\n**DMS\\Tornado\\Controller**\r\n\r\n| Atributo | Detalle |\r\n| ------ | ------- |\r\n| app | Instancia de Tornado |\r\n\r\n## Licencia:\r\n\r\nEl proyecto se distribuye bajo la licencia MIT.\r\n\r\n### Tests unitarios:\r\n\r\nPara ejecutar los test es necesario descargar PHPUnit. \r\nSitúese en la carpeta raíz de Tornado y ejecute la siguiente instrucción por línea de comando: \r\n\r\n```\r\n    phpunit.phar\r\n```\r\n\r\nAnte errores o sugerencias escriba a la dirección de email de contacto.\r\n\r\n## Sugerencias y colaboración:\r\n\r\nEmail: info@daniel.spiridione.com.ar",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
